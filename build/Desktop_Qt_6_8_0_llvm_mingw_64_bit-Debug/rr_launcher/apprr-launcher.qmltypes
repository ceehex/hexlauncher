import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by qmltyperegistrar.

Module {
    Component {
        file: "gamepreset.h"
        name: "GamePreset"
        accessSemantics: "reference"
        prototype: "QObject"
    }
    Component {
        file: "gamepresetmodel.h"
        name: "GamePresetModel"
        accessSemantics: "reference"
        prototype: "QAbstractListModel"
        Method {
            name: "setOptionChoice"
            Parameter { name: "choice_idx"; type: "int" }
            Parameter { name: "preset_name"; type: "QString" }
            Parameter { name: "option_idx"; type: "int" }
        }
        Method {
            name: "isDuplicate"
            type: "bool"
            Parameter { name: "name"; type: "QString" }
        }
        Method {
            name: "deletePreset"
            Parameter { name: "preset_name"; type: "QString" }
        }
    }
    Component {
        file: "globalmodels.h"
        name: "GlobalModels"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["rr_launcher/GlobalModels 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [256]
        Property {
            name: "presetParser"
            type: "PresetParser"
            isPointer: true
            read: "presetParser"
            write: "setPresetParser"
            notify: "presetParserChanged"
            index: 0
        }
        Property {
            name: "gamePresetModel"
            type: "GamePresetModel"
            isPointer: true
            read: "gamePresetModel"
            write: "setGamePresetModel"
            notify: "gamePresetModelChanged"
            index: 1
        }
        Property {
            name: "optionModel"
            type: "OptionModel"
            isPointer: true
            read: "optionModel"
            write: "setOptionModel"
            notify: "optionModelChanged"
            index: 2
        }
        Signal { name: "gamePresetModelChanged" }
        Signal { name: "presetParserChanged" }
        Signal { name: "optionModelChanged" }
        Method { name: "hello" }
    }
    Component {
        file: "presetparser.h"
        name: "PresetParser"
        accessSemantics: "reference"
        prototype: "QObject"
        Property {
            name: "mkwiiPath"
            type: "QString"
            read: "mkwiiPath"
            write: "setMkwiiPath"
            notify: "mkwiiPathChanged"
            index: 0
        }
        Property {
            name: "dolphPath"
            type: "QString"
            read: "dolphPath"
            write: "setDolphPath"
            notify: "dolphPathChanged"
            index: 1
        }
        Signal { name: "getOptions" }
        Signal {
            name: "sendError"
            Parameter { name: "error_msg"; type: "QString" }
        }
        Signal { name: "mkwiiPathChanged" }
        Signal { name: "dolphPathChanged" }
        Method {
            name: "writeToJson"
            Parameter { name: "game_path"; type: "QString" }
            Parameter { name: "save_location"; type: "QString" }
            Parameter { name: "preset_name"; type: "QString" }
        }
        Method {
            name: "parseRiivoXML"
            Parameter { name: "riivo_base_path"; type: "QUrl" }
            Parameter { name: "display_name"; type: "QString" }
        }
        Method {
            name: "addOption"
            Parameter { name: "option"; type: "QString" }
            Parameter { name: "index"; type: "int" }
        }
        Method { name: "collectOptions" }
        Method { name: "printHello" }
        Method {
            name: "savePreset"
            Parameter { name: "display_name"; type: "QString" }
            Parameter { name: "save_path"; type: "QUrl" }
        }
        Method {
            name: "setGamePath"
            Parameter { name: "mkwii_path"; type: "QUrl" }
        }
        Method {
            name: "setExecutablePath"
            Parameter { name: "dolphin_executable"; type: "QUrl" }
        }
        Method {
            name: "runGame"
            Parameter { name: "json_path"; type: "QString" }
        }
    }
}
